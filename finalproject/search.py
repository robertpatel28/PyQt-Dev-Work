# Form implementation generated from reading ui file 'search.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import pymysql as mdb

class Ui_searchWindow(object):
    def setupUi(self, searchWindow):
        searchWindow.setObjectName("searchWindow")
        searchWindow.resize(800, 600)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        searchWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(parent=searchWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.cmbBooks = QtWidgets.QComboBox(parent=self.centralwidget)
        self.cmbBooks.setGeometry(QtCore.QRect(110, 110 ,121, 121))
        self.cmbBooks.setObjectName("cmbBooks")
        self.txtAveragePrice = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.txtAveragePrice.setGeometry(QtCore.QRect(360, 160, 113, 21))
        self.txtAveragePrice.setReadOnly(True)
        self.txtAveragePrice.setObjectName("txtAveragePrice")
        self.lblAveragePrice = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblAveragePrice.setGeometry(QtCore.QRect(300, 160, 71, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.lblAveragePrice.setFont(font)
        self.lblAveragePrice.setObjectName("lblAveragePrice")
        self.tblTransactions = QtWidgets.QTableWidget(parent=self.centralwidget)
        self.tblTransactions.setGeometry(QtCore.QRect(60, 220, 681, 192))
        self.tblTransactions.setObjectName("tblTransactions")
        self.tblTransactions.setColumnCount(0)
        self.tblTransactions.setRowCount(0)
        searchWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=searchWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 43))
        self.menubar.setObjectName("menubar")
        searchWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=searchWindow)
        self.statusbar.setObjectName("statusbar")
        searchWindow.setStatusBar(self.statusbar)

        self.retranslateUi(searchWindow)
        QtCore.QMetaObject.connectSlotsByName(searchWindow)

        # Loads book data from external file.
        self.load_data()
        # Runs the method to display the average price whenever the selected book is changed.
        self.cmbBooks.currentIndexChanged.connect(self.display_book_data)

    # Loads book data from external file.
    def load_data(self):
        # Assigns file_name to variable.
        file_name = "price_data.txt"
        # Opens the file assigned to file_name.
        with open(file_name, "r") as filename:
                # For loop to iterate through file lines.
                for line in filename:
                    line = line.strip()
                    # Stops when there is a null or empty line.
                    if not line:
                        continue
                    # Parses through price_data.txt file to store values.
                    data = line.split(",")
                    # Assigns vales in file to variables.
                    book_name = data[0]
                    book_price = int(data[1])
                    self.cmbBooks.addItem(book_name)

    # Method that creates connection to database.
    def connecttodb(self):
        try:
            # Connection is made to database.
            connectionobj = mdb.connect(host="localhost", user="adminuser", password="adminuser",
            database="finalprojectdb", port=3306)
            # Print verification of connection message to console.
            print("Connected to Database...")
            return connectionobj
        # Throws exception if database connection fails.
        except Exception as e:
            print(e)

    def display_book_data(self):
        # Connects to database.
        conn = self.connecttodb()
        cursorobj = conn.cursor()
        # Variable holds user selected book choice.
        book_selection = self.cmbBooks.currentText()
        # Creates total variable to hold total cost for books.
        total = 0
        # Creates count variable to hold for quantity of books.
        transaction_count = 0
        try:
            # Executes SQL query to database.
            cursorobj.execute("SELECT * FROM finalprojectdb.book_sales where booktitle =%s;", (book_selection,))
            results = cursorobj.fetchall()
            if not results:
                # Average price is set to $0.00 as there are no transactions for selected book.
                self.txtAveragePrice.setText("$0.00")
                # Clears the table if there are no transactions for the selected book.
                self.tblTransactions.setRowCount(0)
                # Ends the method.
                return
            # Assigns row length to variable.
            row_length = len(results)
            # Assigns column length to variable.
            col_length = len(cursorobj.description)
            # Iterates through each row retrieved from the queury.
            for row in results:
                # Adds up the total.
                total += int(row[4])
                # Adds 1 to the transaction count for each transaction.
                transaction_count += 1
            # Calculates the average.
            average = total / transaction_count
            # Sets the average price in the text box.
            self.txtAveragePrice.setText(f"${average:,.2f}")

            # Sets up the table dimensions.
            self.tblTransactions.setRowCount(row_length)
            self.tblTransactions.setColumnCount(col_length)
            self.tblTransactions.setHorizontalHeaderLabels(["Transaction ID", "Customer Name", "Book Title", "Quantity", "Total"])
            # Iterates through rows to display book data in table.
            for row_idx, (transactionid, customername, booktitle, quantity, total) in enumerate(results):
                self.tblTransactions.setItem(row_idx, 0, QtWidgets.QTableWidgetItem(str(transactionid)))
                self.tblTransactions.setItem(row_idx, 1, QtWidgets.QTableWidgetItem(customername))
                self.tblTransactions.setItem(row_idx, 2, QtWidgets.QTableWidgetItem(booktitle))
                self.tblTransactions.setItem(row_idx, 3, QtWidgets.QTableWidgetItem(str(quantity)))
                self.tblTransactions.setItem(row_idx, 4, QtWidgets.QTableWidgetItem(f"${total:,.2f}"))
        # Prints exception message to user.
        except Exception as e:
            print(e)
        # Closes the database connection.
        finally:
            if conn:
                conn.close()

    def retranslateUi(self, searchWindow):
        _translate = QtCore.QCoreApplication.translate
        searchWindow.setWindowTitle(_translate("searchWindow", "Search"))
        self.lblAveragePrice.setText(_translate("searchWindow", "Average Price:"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    searchWindow = QtWidgets.QMainWindow()
    ui = Ui_searchWindow()
    ui.setupUi(searchWindow)
    searchWindow.show()
    sys.exit(app.exec())
