# Form implementation generated from reading ui file 'purchase.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMessageBox
import pymysql as mdb

class Ui_secondWindowPurchase(object):
    def setupUi(self, secondWindowPurchase):
        secondWindowPurchase.setObjectName("secondWindowPurchase")
        secondWindowPurchase.resize(800, 600)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        secondWindowPurchase.setFont(font)
        self.centralwidget = QtWidgets.QWidget(parent=secondWindowPurchase)
        self.centralwidget.setObjectName("centralwidget")
        self.txtTransactionId = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.txtTransactionId.setGeometry(QtCore.QRect(150, 140, 113, 21))
        self.txtTransactionId.setObjectName("txtTransactionId")
        self.lblTransactionId = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblTransactionId.setGeometry(QtCore.QRect(60, 140, 91, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.lblTransactionId.setFont(font)
        self.lblTransactionId.setObjectName("lblTransactionId")
        self.cmbBooks = QtWidgets.QComboBox(parent=self.centralwidget)
        self.cmbBooks.setGeometry(QtCore.QRect(360, 160, 104, 26))
        self.cmbBooks.setObjectName("cmbBooks")
        self.lblBookSelection = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblBookSelection.setGeometry(QtCore.QRect(380, 140, 61, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.lblBookSelection.setFont(font)
        self.lblBookSelection.setObjectName("lblBookSelection")
        self.txtQuantity = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.txtQuantity.setGeometry(QtCore.QRect(150, 170, 113, 21))
        self.txtQuantity.setObjectName("txtQuantity")
        self.lblQuantity = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblQuantity.setGeometry(QtCore.QRect(90, 170, 61, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.lblQuantity.setFont(font)
        self.lblQuantity.setObjectName("lblQuantity")
        self.btnPurchase = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btnPurchase.setGeometry(QtCore.QRect(350, 380, 113, 32))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.btnPurchase.setFont(font)
        self.btnPurchase.setObjectName("btnPurchase")
        self.txtSubtotal = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.txtSubtotal.setGeometry(QtCore.QRect(350, 300, 113, 21))
        self.txtSubtotal.setReadOnly(True)
        self.txtSubtotal.setObjectName("txtSubtotal")
        self.txtTotalPrice = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.txtTotalPrice.setGeometry(QtCore.QRect(350, 330, 113, 21))
        self.txtTotalPrice.setReadOnly(True)
        self.txtTotalPrice.setObjectName("txtTotalPrice")
        self.lblSubtotal = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblSubtotal.setGeometry(QtCore.QRect(310, 300, 41, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.lblSubtotal.setFont(font)
        self.lblSubtotal.setObjectName("lblSubtotal")
        self.lblPrice = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblPrice.setGeometry(QtCore.QRect(300, 330, 60, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.lblPrice.setFont(font)
        self.lblPrice.setObjectName("lblPrice")
        self.lblCustomerName = QtWidgets.QLabel(parent=self.centralwidget)
        self.lblCustomerName.setGeometry(QtCore.QRect(79, 200, 71, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.lblCustomerName.setFont(font)
        self.lblCustomerName.setObjectName("lblCustomerName")
        self.txtCustomerName = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.txtCustomerName.setGeometry(QtCore.QRect(150, 200, 113, 21))
        self.txtCustomerName.setReadOnly(True)
        self.txtCustomerName.setObjectName("txtCustomerName")
        secondWindowPurchase.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=secondWindowPurchase)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 43))
        self.menubar.setObjectName("menubar")
        secondWindowPurchase.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=secondWindowPurchase)
        self.statusbar.setObjectName("statusbar")
        secondWindowPurchase.setStatusBar(self.statusbar)

        self.retranslateUi(secondWindowPurchase)
        QtCore.QMetaObject.connectSlotsByName(secondWindowPurchase)
        # Loads the data from the file.
        self.load_data()
        # Purchases the book when clicked and stores data in database.
        self.btnPurchase.clicked.connect(self.purchase_book)

    # Method that creates connection to database.
    def connecttodb(self):
        try:
            # Connection is made to database.
            connectionobj = mdb.connect(host="localhost", user="adminuser", password="adminuser",
            database="finalprojectdb", port=3306)
            # Print verification of connection message to console.
            print("Connected to Database...")
            return connectionobj
        # Throws exception if database connection fails.
        except Exception as e:
            print(e)

    # Creates a dictionary for book info.
    book_dictionary = {}
    # Loads price data from external file.
    def load_data(self):
        # Creates a dictionary for book info.
        self.book_dictionary = {}
        # Assigns file_name to variable.
        file_name = "price_data.txt"
        # Opens the file assigned to file_name.
        with open(file_name, "r") as filename:
                # For loop to iterate through file lines.
                for line in filename:
                    line = line.strip()
                    # Stops when there is a null or empty line.
                    if not line:
                        continue
                    # Parses through price_data.txt file to store values.
                    data = line.split(",")
                    # Assigns vales in file to variables.
                    book_name = data[0]
                    book_price = int(data[1])
                    self.cmbBooks.addItem(book_name)
                    self.book_dictionary[book_name] = book_price

    # Method used to purchase a book and store info in the database.
    def purchase_book(self):
        from dashboard import Ui_mainWindowDashboard
        # Variable to hold tax percentage
        TAX_VALUE = 1.08
        # Assigns input to variables.
        transaction_id = self.txtTransactionId.text().strip()
        quantity = self.txtQuantity.text().strip()
        book_selection = self.cmbBooks.currentText().strip()
        # Connects to database.
        conn = self.connecttodb()
        cursorobj = conn.cursor()

        if transaction_id.isdigit() and quantity.isdigit() and book_selection != "":
            try:
                # Checks for transactions containing a duplicate transaction ID
                cursorobj.execute("SELECT * FROM book_sales WHERE transactionid = %s", (transaction_id,))
                result = cursorobj.fetchone()
                # Displays error message to user if a transaction already has that transaction ID.
                if result:
                    # Creates message box instance to show message to user.
                    box = QMessageBox()
                    # Writes message box to user with message regarding duplicate transaction ID.
                    box.setText("Cannot create a transaction with this transaction ID as it already exists. Please enter a different ID number for the transaction.")
                    # Executes message and displays to user.
                    box.exec()
                    # Closes method if a duplicate is found.
                    return

                # Creates customer_name variable to hold the customer name.
                customer_name = self.txtCustomerName.text()
                # Creates price variable to hold book price.
                price = self.book_dictionary.get(book_selection, 0)
                # Creates value to hold subtotal.
                subtotal = price * int(quantity)
                # Displays the subtotal to the user in textbox.
                self.txtSubtotal.setText(f"{subtotal:,.2f}")
                # Calculates the total
                total = subtotal * TAX_VALUE
                # Displays the total to the user in textbox.
                self.txtTotalPrice.setText(f"{total:,.2f}")

                # Check if connection was successful
                if conn:
                    cursorobj.execute("INSERT INTO book_sales (transactionid, customername, booktitle, quantity, total) VALUES (%s, %s, %s, %s ,%s)", (transaction_id, customer_name, book_selection, quantity, total))
                    conn.commit()  # Commit changes to the database
            # Prints exception message to user.
            except Exception as e:
                print(e)
            # Closes database connection.
            finally:
                if conn:
                    conn.close()
        else:
            # Creates message box instance to show message to user.
            msg = QMessageBox()
            # Writes message box to user with message regarding duplicate ID.
            msg.setText("Cannot add purchase information with empty input boxes. Please enter information into each box.")
            # Executes message and displays to user.
            msg.exec()
            # Exits the method if duplicate method is found.
            return

    def retranslateUi(self, secondWindowPurchase):
        _translate = QtCore.QCoreApplication.translate
        secondWindowPurchase.setWindowTitle(_translate("secondWindowPurchase", "Purchase"))
        self.lblTransactionId.setText(_translate("secondWindowPurchase", "Enter Transaction ID:"))
        self.lblBookSelection.setText(_translate("secondWindowPurchase", "Select a Book:"))
        self.lblCustomerName.setText(_translate("secondWindowPurchase", "Customer Name:"))
        self.lblQuantity.setText(_translate("secondWindowPurchase", "Enter Quantity:"))
        self.btnPurchase.setText(_translate("secondWindowPurchase", "Purchase"))
        self.lblSubtotal.setText(_translate("secondWindowPurchase", "Subtotal:"))
        self.lblPrice.setText(_translate("secondWindowPurchase", "Total Price:"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    secondWindowPurchase = QtWidgets.QMainWindow()
    ui = Ui_secondWindowPurchase()
    ui.setupUi(secondWindowPurchase)
    secondWindowPurchase.show()
    sys.exit(app.exec())
