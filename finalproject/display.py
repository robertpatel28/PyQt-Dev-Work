# Form implementation generated from reading ui file 'display.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import pymysql as mdb 

class Ui_displayWindow(object):
    def setupUi(self, displayWindow):
        displayWindow.setObjectName("displayWindow")
        displayWindow.resize(800, 600)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        displayWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(parent=displayWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tblDisplay = QtWidgets.QTableWidget(parent=self.centralwidget)
        self.tblDisplay.setGeometry(QtCore.QRect(150, 120, 481, 251))
        self.tblDisplay.setObjectName("tblDisplay")
        self.tblDisplay.setColumnCount(0)
        self.tblDisplay.setRowCount(0)
        displayWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=displayWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 43))
        self.menubar.setObjectName("menubar")
        displayWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=displayWindow)
        self.statusbar.setObjectName("statusbar")
        displayWindow.setStatusBar(self.statusbar)

        self.retranslateUi(displayWindow)
        QtCore.QMetaObject.connectSlotsByName(displayWindow)

        # Loads the data into the table.
        self.load_data()

    # Method that creates connection to database.
    def connecttodb(self):
        try:
            # Connection is made to database.
            connectionobj = mdb.connect(host="localhost", user="adminuser", password="adminuser",
            database="finalprojectdb", port=3306)
            # Print verification of connection message to console.
            print("Connected to Database...")
            return connectionobj
        # Throws exception if database connection fails.
        except Exception as e:
            print(e)

    def load_data(self):
        # Connects to database.
        conn = self.connecttodb()
        cursorobj = conn.cursor()
        try:
            # Executes SQL query to database.
            cursorobj.execute("SELECT * FROM finalprojectdb.book_sales")
            results = cursorobj.fetchall()
            # Assigns row length to variable.
            row_length = len(results)
            # Assigns column length to variable.
            col_length = len(cursorobj.description)
            # Sets up the table dimensions.
            self.tblDisplay.setRowCount(row_length)
            self.tblDisplay.setColumnCount(col_length)
            self.tblDisplay.setHorizontalHeaderLabels(["Transaction ID", "Customer Name", "Book Title", "Quantity", "Total"])
            # Iterates through rows to display book data in table.
            for row_idx, (transactionid, customername, booktitle, quantity, total) in enumerate(results):
                self.tblDisplay.setItem(row_idx, 0, QtWidgets.QTableWidgetItem(str(transactionid)))
                self.tblDisplay.setItem(row_idx, 1, QtWidgets.QTableWidgetItem(customername))
                self.tblDisplay.setItem(row_idx, 2, QtWidgets.QTableWidgetItem(booktitle))
                self.tblDisplay.setItem(row_idx, 3, QtWidgets.QTableWidgetItem(str(quantity)))
                self.tblDisplay.setItem(row_idx, 4, QtWidgets.QTableWidgetItem(f"${total:,.2f}"))
        # Prints exception message to user.
        except Exception as e:
            print(e)
        # Closes the database connection.
        finally:
            if conn:
                conn.close()

    def retranslateUi(self, displayWindow):
        _translate = QtCore.QCoreApplication.translate
        displayWindow.setWindowTitle(_translate("displayWindow", "Display"))
