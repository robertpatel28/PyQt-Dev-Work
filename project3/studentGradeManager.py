# Form implementation generated from reading ui file 'studentGradeManager.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# GUI made with PyQt and source code written by Alex Patel.
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMessageBox
import pymysql as mdb


class Ui_StudentGradeManager(object):
    def setupUi(self, StudentGradeManager):
        StudentGradeManager.setObjectName("StudentGradeManager")
        StudentGradeManager.resize(800, 600)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        StudentGradeManager.setFont(font)
        self.centralwidget = QtWidgets.QWidget(parent=StudentGradeManager)
        self.centralwidget.setObjectName("centralwidget")
        self.tbManager = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tbManager.setGeometry(QtCore.QRect(10, 30, 781, 491))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.tbManager.setFont(font)
        self.tbManager.setObjectName("tbManager")
        self.studentInfo = QtWidgets.QWidget()
        self.studentInfo.setObjectName("studentInfo")
        self.btnInsert = QtWidgets.QPushButton(parent=self.studentInfo)
        self.btnInsert.setGeometry(QtCore.QRect(220, 230, 221, 32))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.btnInsert.setFont(font)
        self.btnInsert.setObjectName("btnInsert")
        self.btnDisplay = QtWidgets.QPushButton(parent=self.studentInfo)
        self.btnDisplay.setGeometry(QtCore.QRect(10, 230, 221, 32))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.btnDisplay.setFont(font)
        self.btnDisplay.setObjectName("btnDisplay")
        self.lblGetName = QtWidgets.QLabel(parent=self.studentInfo)
        self.lblGetName.setGeometry(QtCore.QRect(190, 150, 111, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.lblGetName.setFont(font)
        self.lblGetName.setObjectName("lblGetName")
        self.lblGetId = QtWidgets.QLabel(parent=self.studentInfo)
        self.lblGetId.setGeometry(QtCore.QRect(200, 170, 81, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.lblGetId.setFont(font)
        self.lblGetId.setObjectName("lblGetId")
        self.lblGetScore = QtWidgets.QLabel(parent=self.studentInfo)
        self.lblGetScore.setGeometry(QtCore.QRect(180, 190, 101, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.lblGetScore.setFont(font)
        self.lblGetScore.setObjectName("lblGetScore")
        self.txtName = QtWidgets.QLineEdit(parent=self.studentInfo)
        self.txtName.setGeometry(QtCore.QRect(280, 150, 113, 21))
        self.txtName.setObjectName("txtName")
        self.txtStudentID = QtWidgets.QLineEdit(parent=self.studentInfo)
        self.txtStudentID.setGeometry(QtCore.QRect(280, 170, 113, 21))
        self.txtStudentID.setObjectName("txtStudentID")
        self.txtScore = QtWidgets.QLineEdit(parent=self.studentInfo)
        self.txtScore.setGeometry(QtCore.QRect(280, 190, 113, 21))
        self.txtScore.setObjectName("txtScore")
        self.tblDisplayData = QtWidgets.QTableWidget(parent=self.studentInfo)
        self.tblDisplayData.setGeometry(QtCore.QRect(445, 40, 321, 411))
        self.tblDisplayData.setObjectName("tblDisplayData")
        self.tbManager.addTab(self.studentInfo, "")
        self.studentGrade = QtWidgets.QWidget()
        self.studentGrade.setObjectName("studentGrade")
        self.lstStudentData = QtWidgets.QListWidget(parent=self.studentGrade)
        self.lstStudentData.setGeometry(QtCore.QRect(160, 40, 411, 251))
        self.lstStudentData.setObjectName("lstStudentData")
        self.btnExportData = QtWidgets.QPushButton(parent=self.studentGrade)
        self.btnExportData.setGeometry(QtCore.QRect(160, 300, 421, 32))
        self.btnExportData.setObjectName("btnExportData")
        self.tbManager.addTab(self.studentGrade, "")
        StudentGradeManager.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=StudentGradeManager)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 43))
        self.menubar.setObjectName("menubar")
        StudentGradeManager.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=StudentGradeManager)
        self.statusbar.setObjectName("statusbar")
        StudentGradeManager.setStatusBar(self.statusbar)

        self.retranslateUi(StudentGradeManager)
        self.tbManager.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(StudentGradeManager)

        # Loads file data.
        self.load_data()
        # Displays the student information to the list object.
        self.display_grades_list()
        # Connects insert_data to button click.
        self.btnInsert.clicked.connect(self.insert_data)
        # Connects display_data to button click.
        self.btnDisplay.clicked.connect(self.display_data_table)
        # Exports student information to file.
        self.btnExportData.clicked.connect(self.export_data)

    # Method that creates connection to database.
    def connecttodb(self):
        try:
            # Connection is made to database.
            connectionobj = mdb.connect(host="localhost", user="adminuser", password="adminuser",
            database="project4db", port=3306)
            # Print verification of connection message to console.
            print("Connected to Database...")
            return connectionobj
        # Throws exception if database connection fails.
        except Exception as e:
            print(e)

    # Method that displays grades in the list object.
    def display_grades_list(self):
        try:
            # Initializes connection variable.
            conn = ""
            # Connect to database
            conn = self.connecttodb()
            cursor = conn.cursor()
            cursor.execute("SELECT studentid, studentname, studentscore FROM studentinfo")
            results = cursor.fetchall()
            # Iterates through results to evaluate student scores and assign letter grade.
            for studentid, name, score in results:
                # Determine grade
                if score >= 90:
                    grade = 'A'
                elif score >= 80:
                    grade = 'B'
                elif score >= 70:
                    grade = 'C'
                elif score >= 60:
                    grade = 'D'
                else:
                    grade = 'F'
                # Add to QListWidget
                self.lstStudentData.addItem(f"Student ID: {studentid} | Student Name: {name} | Student Grade: {grade} | Student Score: {score}")
        # Throws exception and prints error message.
        except Exception as e:
            print(e)
        # Closes database connection.
        finally:
            if conn:
                conn.close()

    # Method that displays the student info in the data table.
    def display_data_table(self):
        try:
            # Connect to the database
            conn = self.connecttodb()
            cursorobj = conn.cursor()
            cursorobj.execute("SELECT studentid, studentname, studentscore FROM studentinfo")
            results = cursorobj.fetchall()
            # Assigns row length to variable.
            row_length = len(results)
            # Assigns column length to variable.
            col_length = len(cursorobj.description)
            # Sets up the table dimensions.
            self.tblDisplayData.setRowCount(row_length)
            self.tblDisplayData.setColumnCount(col_length)
            self.tblDisplayData.setHorizontalHeaderLabels(["Student ID", "Name", "Score", "Grade"])
            # Iterates through rows to display student data in table.
            for row_idx, (studentid, name, score) in enumerate(results):
                # Adds student data to the table display.
                self.tblDisplayData.setItem(row_idx, 0, QtWidgets.QTableWidgetItem(str(studentid)))
                self.tblDisplayData.setItem(row_idx, 1, QtWidgets.QTableWidgetItem(name))
                self.tblDisplayData.setItem(row_idx, 2, QtWidgets.QTableWidgetItem(str(score)))
        # Prints exception message to user.
        except Exception as e:
            print(e)
        # Closes database connection.
        finally:
            if conn:
                conn.close()
    
    # Method that loads the data from the file into the database.
    def load_data(self):
        try:
            # Creates connection and assigns to variable.
            conn = self.connecttodb()
            cursorobj = conn.cursor()
            # The name of the file.
            file_name = "studentdata.txt"
            with open(file_name, "r") as filename:
                # For loop to iterate through file lines.
                for line in filename:
                    line = line.strip()
                    # Stops when there is a null or empty line.
                    if not line:
                        continue
                    print(line)
                    # Parses through studentdata.txt file to send values to database.
                    data = line.split(",")
                    # Assigns vales in file to variables.
                    id = int(data[0])
                    name = data[1]
                    score = int(data[2])
                    # Writes query for database.
                    cursorobj.execute("INSERT INTO studentinfo (studentname, studentid, studentscore) VALUES (%s, %s, %s)", (name, id, score))
                    print(f"{id}, {name}, {score} Inserted into DB.")
            # Commits query to database.
            conn.commit()
        # Catches and prints exception.
        except Exception as e:
            print(e)
    
    def insert_data(self):
            try:
                # Initializes connection variable.
                conn = ""
                # Assigns values of student to variables.
                name = self.txtName.text().strip()
                id = self.txtStudentID.text().strip()
                score = self.txtScore.text().strip()
                # Validates input
                if (name != "" and id.isdigit() and score.isdigit()):
                    # Establishes a connection to the database and stores connection in variable 'conn'.
                    conn = self.connecttodb()
                    # Create a cursor object.
                    cursorobj = conn.cursor()
                    cursorobj.execute("SELECT COUNT(*) FROM studentinfo WHERE studentid = %s", (id,))
                    # Checks for duplicate student information in database.
                    if cursorobj.fetchone()[0] > 0:
                        # Creates message box instance to show message to user.
                        msg = QMessageBox()
                        # Writes message box to user with message regarding duplicate ID.
                        msg.setText("Student ID already exists. Please use a unique ID.")
                        # Executes message and displays to user.
                        msg.exec()
                        # Exits the method if duplicate method is found.
                        return
                    cursorobj.execute("INSERT INTO studentinfo (studentname, studentid, studentscore) VALUES (%s, %s, %s)", (name, id, score))
                    # Clears text boxes to prepare next data insertion.
                    self.txtName.clear()
                    self.txtStudentID.clear()
                    self.txtScore.clear()
                    # Commits the insert transaction to the database table.
                    conn.commit()
                    # Create a message box to success message.
                    msg = QMessageBox()
                    # Writes the message that will be displayed to user when an upload occurs.
                    msg.setText("Student Data successfully uploaded.")
                    # Executes the message.
                    msg.exec()
                else:
                    # Create a message box to output error message.
                    msg = QMessageBox()
                    # Writes the message that will be displayed to user when an error occurs.
                    msg.setText("Please enter information in ALL textboxes. (Student Name, Student ID, Student Score)")
                    # Executes the message.
                    msg.exec()
            # Prints exception to user it thrown.
            except Exception as e:
                print(e)
            finally:
                # If conn exists.
                if (conn):
                    # Closes connection.
                    conn.close()
                    

    def export_data(self):
        try:
            # Establishes the connection and assigns to variables.
            conn = self.connecttodb()
            cursorobj = conn.cursor()
            # Executes query to retrieve student data from database.
            cursorobj.execute("SELECT studentid, studentname, studentscore FROM studentinfo")
            results = cursorobj.fetchall()
            # Creates the file to write to.
            with open("studentgrades.txt", "a") as f:
                # Assigns student letter grade based on score.
                for studentid, name, score in results:
                    if score >= 90:
                        grade = 'A'
                    elif score >= 80:
                        grade = 'B'
                    elif score >= 70:
                        grade = 'C'
                    elif score >= 60:
                        grade = 'D'
                    else:
                        grade = 'F'
                    # Writes student information to file.
                    f.write(f"{studentid}, {name}, {grade}\n")
        # Catches exception if cannot be written to file.
        except Exception as e:
            # Prints exception message.
            print(e)
        finally:
            # Closes the connection if it exists.
            if conn:
                # Closes the connection.
                conn.close()

    def retranslateUi(self, StudentGradeManager):
        _translate = QtCore.QCoreApplication.translate
        StudentGradeManager.setWindowTitle(_translate("StudentGradeManager", "Student Grade Manager"))
        self.btnInsert.setText(_translate("StudentGradeManager", "Insert Data"))
        self.btnDisplay.setText(_translate("StudentGradeManager", "Display Data"))
        self.lblGetName.setText(_translate("StudentGradeManager", "Enter Student Name:"))
        self.lblGetId.setText(_translate("StudentGradeManager", "  Enter Student ID:"))
        self.lblGetScore.setText(_translate("StudentGradeManager", "    Enter Student Score:"))
        self.tbManager.setTabText(self.tbManager.indexOf(self.studentInfo), _translate("StudentGradeManager", "Student Info"))
        self.btnExportData.setText(_translate("StudentGradeManager", "Export Data"))
        self.tbManager.setTabText(self.tbManager.indexOf(self.studentGrade), _translate("StudentGradeManager", "Student Grade"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    StudentGradeManager = QtWidgets.QMainWindow()
    ui = Ui_StudentGradeManager()
    ui.setupUi(StudentGradeManager)
    StudentGradeManager.show()
    sys.exit(app.exec())
