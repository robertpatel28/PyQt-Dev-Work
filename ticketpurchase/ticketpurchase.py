# Form implementation generated from reading ui file 'ticketpurchase.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_ticketPurchase(object):
    def setupUi(self, ticketPurchase):
        ticketPurchase.setObjectName("ticketPurchase")
        ticketPurchase.resize(1111, 840)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        ticketPurchase.setFont(font)
        self.centralwidget = QtWidgets.QWidget(parent=ticketPurchase)
        self.centralwidget.setObjectName("centralwidget")
        self.tbTicketPurchase = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tbTicketPurchase.setGeometry(QtCore.QRect(20, 20, 1061, 741))
        self.tbTicketPurchase.setObjectName("tbTicketPurchase")
        self.ticketPuchase = QtWidgets.QWidget()
        self.ticketPuchase.setObjectName("ticketPuchase")
        self.lblName = QtWidgets.QLabel(parent=self.ticketPuchase)
        self.lblName.setGeometry(QtCore.QRect(190, 90, 101, 21))
        self.lblName.setObjectName("lblName")
        self.txtName = QtWidgets.QLineEdit(parent=self.ticketPuchase)
        self.txtName.setGeometry(QtCore.QRect(370, 90, 113, 22))
        self.txtName.setObjectName("txtName")
        self.lblAge = QtWidgets.QLabel(parent=self.ticketPuchase)
        self.lblAge.setGeometry(QtCore.QRect(190, 160, 101, 21))
        self.lblAge.setObjectName("lblAge")
        self.txtAge = QtWidgets.QLineEdit(parent=self.ticketPuchase)
        self.txtAge.setGeometry(QtCore.QRect(370, 160, 113, 22))
        self.txtAge.setObjectName("txtAge")
        self.lblTicketType = QtWidgets.QLabel(parent=self.ticketPuchase)
        self.lblTicketType.setGeometry(QtCore.QRect(190, 230, 151, 21))
        self.lblTicketType.setObjectName("lblTicketType")
        self.cmbTicketType = QtWidgets.QComboBox(parent=self.ticketPuchase)
        self.cmbTicketType.setGeometry(QtCore.QRect(370, 230, 121, 22))
        self.cmbTicketType.setObjectName("cmbTicketType")
        self.cmbTicketType.addItem("")
        self.cmbTicketType.addItem("")
        self.cmbTicketType.addItem("")
        self.grpNumberOfTickets = QtWidgets.QGroupBox(parent=self.ticketPuchase)
        self.grpNumberOfTickets.setGeometry(QtCore.QRect(600, 230, 201, 71))
        self.grpNumberOfTickets.setObjectName("grpNumberOfTickets")
        self.rd1 = QtWidgets.QRadioButton(parent=self.grpNumberOfTickets)
        self.rd1.setGeometry(QtCore.QRect(10, 30, 41, 20))
        self.rd1.setObjectName("rd1")
        self.rd2 = QtWidgets.QRadioButton(parent=self.grpNumberOfTickets)
        self.rd2.setGeometry(QtCore.QRect(70, 30, 41, 20))
        self.rd2.setObjectName("rd2")
        self.rd3 = QtWidgets.QRadioButton(parent=self.grpNumberOfTickets)
        self.rd3.setGeometry(QtCore.QRect(130, 30, 41, 20))
        self.rd3.setObjectName("rd3")
        self.btnCost = QtWidgets.QPushButton(parent=self.ticketPuchase)
        self.btnCost.setGeometry(QtCore.QRect(270, 400, 131, 28))
        self.btnCost.setObjectName("btnCost")
        self.btnPurchase = QtWidgets.QPushButton(parent=self.ticketPuchase)
        self.btnPurchase.setGeometry(QtCore.QRect(470, 400, 131, 28))
        self.btnPurchase.setObjectName("btnPurchase")
        self.btnClear = QtWidgets.QPushButton(parent=self.ticketPuchase)
        self.btnClear.setGeometry(QtCore.QRect(660, 400, 101, 28))
        self.btnClear.setObjectName("btnClear")
        self.btnExit = QtWidgets.QPushButton(parent=self.ticketPuchase)
        self.btnExit.setGeometry(QtCore.QRect(800, 400, 101, 28))
        self.btnExit.setObjectName("btnExit")
        self.lblCost = QtWidgets.QLabel(parent=self.ticketPuchase)
        self.lblCost.setGeometry(QtCore.QRect(210, 510, 151, 21))
        self.lblCost.setObjectName("lblCost")
        self.txtCost = QtWidgets.QLineEdit(parent=self.ticketPuchase)
        self.txtCost.setGeometry(QtCore.QRect(380, 510, 113, 22))
        self.txtCost.setReadOnly(True)
        self.txtCost.setObjectName("txtCost")
        self.tbTicketPurchase.addTab(self.ticketPuchase, "")
        self.purchasesMade = QtWidgets.QWidget()
        self.purchasesMade.setObjectName("purchasesMade")
        self.lstPurchases = QtWidgets.QListWidget(parent=self.purchasesMade)
        self.lstPurchases.setGeometry(QtCore.QRect(50, 60, 941, 321))
        self.lstPurchases.setObjectName("lstPurchases")
        self.lblPurchases = QtWidgets.QLabel(parent=self.purchasesMade)
        self.lblPurchases.setGeometry(QtCore.QRect(80, 20, 221, 16))
        self.lblPurchases.setObjectName("lblPurchases")
        self.tbTicketPurchase.addTab(self.purchasesMade, "")
        ticketPurchase.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=ticketPurchase)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1111, 23))
        self.menubar.setObjectName("menubar")
        ticketPurchase.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=ticketPurchase)
        self.statusbar.setObjectName("statusbar")
        ticketPurchase.setStatusBar(self.statusbar)

        self.retranslateUi(ticketPurchase)
        self.tbTicketPurchase.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(ticketPurchase)
        
        # Creating an empty dictionary. This will be populated with ticket type and price
        self.price_data = {}
        self.load_data("price.txt")
        
        self.btnCost.clicked.connect(self.calculate_cost)
        
        self.btnPurchase.clicked.connect(self.purchase)
        
        self.btnClear.clicked.connect(self.clear)
        
        self.tbTicketPurchase.currentChanged.connect(self.display_data)
        
        
    def display_data(self):
        try:
            index = self.tbTicketPurchase.currentIndex()
            if(index == 1):
                with open("Purchases_made.txt", "r") as f:
                    for line in f:
                        self.lstPurchases.addItem(line)
            else:
                self.lstPurchases.clear()
                
        except FileNotFoundError:
            print("File is not present")
        except Exception as e:
            print(e, type(e))
        finally:
            print("Closing any open DB connections")
   # Clear function     
        
    def clear(self):
        try:
            self.txtName.clear()
            self.txtAge.clear()
            self.txtCost.clear()
            self.cmbTicketType.setCurrentIndex(0)
            self.rd1.setChecked(True)
        except Exception as e:
            print(e, type(e))
        finally:
            pass
            #print("Closing any open DB connections")
        
        
    def purchase(self):
        try:
            name = self.txtName.text()
            age = self.txtAge.text()
            selection = self.cmbTicketType.currentText()
            if(self.rd1.isChecked()):
                number_of_tickets = 1
            elif(self.rd2.isChecked()):
                number_of_tickets = 2
            elif(self.rd3.isChecked()):
                number_of_tickets = 3
            else:
                number_of_tickets = 1
                
            with open("Purchases_made.txt", "a") as f:
                f.write(f"{name} {age} {selection} {number_of_tickets} \n")
                
        except Exception as e:
            print(e)
            print(type(e))
        
        finally:
            print("Closing any open DB connections")        
        
        
    def calculate_cost(self):
        try:
            selection = self.cmbTicketType.currentText()
            price_of_ticket = self.price_data.get(selection)
            
            if(self.rd1.isChecked()):
                number_of_tickets = 1
            elif(self.rd2.isChecked()):
                number_of_tickets = 2
            elif(self.rd3.isChecked()):
                number_of_tickets = 3
            else:
                number_of_tickets = 1
               
            cost = price_of_ticket * number_of_tickets
            self.txtCost.setText(f"${cost:.2f}")
        except Exception as e:
            print(e)
            print(type(e))
        finally:
            print("Closing any open DB connections")
        
        
    def load_data(self, filename):
        try:
            with open(filename, "r") as f:
                for line in f:
                    data = line.split(",")
                    self.price_data[data[0]] = int(data[1])
        except FileNotFoundError:
            print("File not present")
        except Exception as e:
            print(e)
            print(type(e))
        finally:
            print("Closing any open DB connections")

    def retranslateUi(self, ticketPurchase):
        _translate = QtCore.QCoreApplication.translate
        ticketPurchase.setWindowTitle(_translate("ticketPurchase", "Ticket Purchase"))
        self.lblName.setText(_translate("ticketPurchase", "Enter Name"))
        self.lblAge.setText(_translate("ticketPurchase", "Enter Age"))
        self.lblTicketType.setText(_translate("ticketPurchase", "Select Ticket Type"))
        self.cmbTicketType.setItemText(0, _translate("ticketPurchase", "Toplevel"))
        self.cmbTicketType.setItemText(1, _translate("ticketPurchase", "Midlevel"))
        self.cmbTicketType.setItemText(2, _translate("ticketPurchase", "Courtside"))
        self.grpNumberOfTickets.setTitle(_translate("ticketPurchase", "Select number of tickets"))
        self.rd1.setText(_translate("ticketPurchase", "1"))
        self.rd2.setText(_translate("ticketPurchase", "2"))
        self.rd3.setText(_translate("ticketPurchase", "3"))
        self.btnCost.setText(_translate("ticketPurchase", "Calculate Cost"))
        self.btnPurchase.setText(_translate("ticketPurchase", "Purchase Tickets"))
        self.btnClear.setText(_translate("ticketPurchase", "Clear"))
        self.btnExit.setText(_translate("ticketPurchase", "Exit"))
        self.lblCost.setText(_translate("ticketPurchase", "Cost of transaction"))
        self.tbTicketPurchase.setTabText(self.tbTicketPurchase.indexOf(self.ticketPuchase), _translate("ticketPurchase", "Ticket Purchase"))
        self.lblPurchases.setText(_translate("ticketPurchase", "List of previous purchases"))
        self.tbTicketPurchase.setTabText(self.tbTicketPurchase.indexOf(self.purchasesMade), _translate("ticketPurchase", "Purchases Made"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ticketPurchase = QtWidgets.QMainWindow()
    ui = Ui_ticketPurchase()
    ui.setupUi(ticketPurchase)
    ticketPurchase.show()
    sys.exit(app.exec())