# Form implementation generated from reading ui file 'homePurchase.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
# Author: Alex Patel
# BUS 442: Prof. Rakesh
# Project 3: Home Purchase Application


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMessageBox


class Ui_HomePurchaseApplication(object):
    def setupUi(self, HomePurchaseApplication):
        HomePurchaseApplication.setObjectName("HomePurchaseApplication")
        HomePurchaseApplication.resize(800, 600)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        HomePurchaseApplication.setFont(font)
        self.centralwidget = QtWidgets.QWidget(parent=HomePurchaseApplication)
        self.centralwidget.setObjectName("centralwidget")
        self.tbHomePurchase = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tbHomePurchase.setGeometry(QtCore.QRect(60, 70, 701, 371))
        self.tbHomePurchase.setObjectName("tbHomePurchase")
        self.addPurchasesTab = QtWidgets.QWidget()
        self.addPurchasesTab.setObjectName("addPurchasesTab")
        self.lblFirstName = QtWidgets.QLabel(parent=self.addPurchasesTab)
        self.lblFirstName.setGeometry(QtCore.QRect(50, 40, 51, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.lblFirstName.setFont(font)
        self.lblFirstName.setObjectName("lblFirstName")
        self.lblLastName = QtWidgets.QLabel(parent=self.addPurchasesTab)
        self.lblLastName.setGeometry(QtCore.QRect(50, 70, 51, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.lblLastName.setFont(font)
        self.lblLastName.setObjectName("lblLastName")
        self.lblAge = QtWidgets.QLabel(parent=self.addPurchasesTab)
        self.lblAge.setGeometry(QtCore.QRect(80, 100, 21, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.lblAge.setFont(font)
        self.lblAge.setObjectName("lblAge")
        self.txtFirstName = QtWidgets.QLineEdit(parent=self.addPurchasesTab)
        self.txtFirstName.setGeometry(QtCore.QRect(100, 40, 113, 21))
        self.txtFirstName.setObjectName("txtFirstName")
        self.txtLastName = QtWidgets.QLineEdit(parent=self.addPurchasesTab)
        self.txtLastName.setGeometry(QtCore.QRect(100, 70, 113, 21))
        self.txtLastName.setObjectName("txtLastName")
        self.txtAge = QtWidgets.QLineEdit(parent=self.addPurchasesTab)
        self.txtAge.setGeometry(QtCore.QRect(100, 100, 113, 21))
        self.txtAge.setObjectName("txtAge")
        self.cmbHouseType = QtWidgets.QComboBox(parent=self.addPurchasesTab)
        self.cmbHouseType.setGeometry(QtCore.QRect(110, 140, 104, 26))
        self.cmbHouseType.setObjectName("cmbHouseType")
        self.cmbHouseType.addItem("")
        self.cmbHouseType.addItem("")
        self.cmbHouseType.addItem("")
        self.cmbHouseType.addItem("")
        self.gbxChoiceOfHome = QtWidgets.QGroupBox(parent=self.addPurchasesTab)
        self.gbxChoiceOfHome.setGeometry(QtCore.QRect(69, 180, 141, 91))
        self.gbxChoiceOfHome.setObjectName("gbxChoiceOfHome")
        self.rbnStandard = QtWidgets.QRadioButton(parent=self.gbxChoiceOfHome)
        self.rbnStandard.setGeometry(QtCore.QRect(0, 20, 100, 20))
        self.rbnStandard.setObjectName("rbnStandard")
        self.rbnSmart = QtWidgets.QRadioButton(parent=self.gbxChoiceOfHome)
        self.rbnSmart.setGeometry(QtCore.QRect(0, 40, 100, 20))
        self.rbnSmart.setObjectName("rbnSmart")
        self.rbnLuxury = QtWidgets.QRadioButton(parent=self.gbxChoiceOfHome)
        self.rbnLuxury.setGeometry(QtCore.QRect(0, 60, 100, 20))
        self.rbnLuxury.setObjectName("rbnLuxury")
        self.lblDownPayment = QtWidgets.QLabel(parent=self.addPurchasesTab)
        self.lblDownPayment.setGeometry(QtCore.QRect(260, 40, 91, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.lblDownPayment.setFont(font)
        self.lblDownPayment.setObjectName("lblDownPayment")
        self.txtDownPayment = QtWidgets.QLineEdit(parent=self.addPurchasesTab)
        self.txtDownPayment.setGeometry(QtCore.QRect(350, 40, 113, 21))
        self.txtDownPayment.setObjectName("txtDownPayment")
        self.lstMonthlyPayments = QtWidgets.QListWidget(parent=self.addPurchasesTab)
        self.lstMonthlyPayments.setGeometry(QtCore.QRect(350, 110, 321, 161))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.lstMonthlyPayments.setFont(font)
        self.lstMonthlyPayments.setObjectName("lstMonthlyPayments")
        self.btnPurchase = QtWidgets.QPushButton(parent=self.addPurchasesTab)
        self.btnPurchase.setGeometry(QtCore.QRect(100, 290, 113, 32))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.btnPurchase.setFont(font)
        self.btnPurchase.setObjectName("btnPurchase")
        self.btnShowPayments = QtWidgets.QPushButton(parent=self.addPurchasesTab)
        self.btnShowPayments.setGeometry(QtCore.QRect(340, 70, 131, 32))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.btnShowPayments.setFont(font)
        self.btnShowPayments.setObjectName("btnShowPayments")
        self.btnExit = QtWidgets.QPushButton(parent=self.addPurchasesTab)
        self.btnExit.setGeometry(QtCore.QRect(580, 0, 113, 32))
        self.btnExit.setObjectName("btnExit")
        self.btnClear = QtWidgets.QPushButton(parent=self.addPurchasesTab)
        self.btnClear.setGeometry(QtCore.QRect(580, 30, 113, 32))
        self.btnClear.setObjectName("btnClear")
        self.tbHomePurchase.addTab(self.addPurchasesTab, "")
        self.homePurchasesTab = QtWidgets.QWidget()
        self.homePurchasesTab.setObjectName("homePurchasesTab")
        self.lstPurchasesMade = QtWidgets.QListWidget(parent=self.homePurchasesTab)
        self.lstPurchasesMade.setGeometry(QtCore.QRect(20, 60, 651, 192))
        self.lstPurchasesMade.setObjectName("lstPurchasesMade")
        self.label = QtWidgets.QLabel(parent=self.homePurchasesTab)
        self.label.setGeometry(QtCore.QRect(300, 40, 91, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.tbHomePurchase.addTab(self.homePurchasesTab, "")
        HomePurchaseApplication.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=HomePurchaseApplication)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 43))
        self.menubar.setObjectName("menubar")
        HomePurchaseApplication.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=HomePurchaseApplication)
        self.statusbar.setObjectName("statusbar")
        HomePurchaseApplication.setStatusBar(self.statusbar)

        self.retranslateUi(HomePurchaseApplication)
        self.tbHomePurchase.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(HomePurchaseApplication)
        # Create an empty dictionary to store house prices.
        self.home_prices_dictionary = {}
        # Function that loads data from file.
        self.load_data("houseprice.txt")
        # Button-click that runs 'purchase_home' function when clicked.
        self.btnPurchase.clicked.connect(self.purchase_home)
        # Button-click that runs 'show_payment' function when clicked.
        self.btnShowPayments.clicked.connect(self.show_payments)
        # Button-click that runs 'clear' function when clicked.
        self.btnClear.clicked.connect(self.clear)
        # Button-click that runs 'show_purchases' function when selected.
        self.tbHomePurchase.currentChanged.connect(self.show_puchases)
        # Button-click that runs the 'exit' function when clicked.
        self.btnExit.clicked.connect(self.exit)

    # Function that reads file information and assigns to dictionary.
    def load_data(self, file_name):
        # Try-catch block in case file cannot be found.
        try:
        # Opens the file in read mode.
            with open(file_name, "r") as filename:
                # Iterates through each line in file, inserting each element in the dictionary.
                for line in filename:
                    data = line.split(",")
                    # Adds data to dictionary.
                    key = data[0].strip()
                    value = int(data[1].strip())
                    self.home_prices_dictionary[key] = value
        except FileNotFoundError:
            print("File not found.")
        except Exception as e:
            print(e)
            print(type(e))
        finally:
            pass

    def purchase_home(self):
        try:
            # Create variables to hold user input values.
            first_name = self.txtFirstName.text()
            last_name = self.txtLastName.text()
            age = self.txtAge.text()
            down_payment = self.txtDownPayment.text()
            house_selection = self.cmbHouseType.currentText()
            checked = False
            # Checks which model type was selected by user.
            if(self.rbnStandard.isChecked()):
                model_type = "Standard"
                checked = True
            elif(self.rbnSmart.isChecked()):
                model_type = "Smart"
                checked = True
            elif(self.rbnLuxury.isChecked()):
                model_type = "Luxury"
                checked = True
            # Checks that each input was valid, messagebox appears if values entered are invalid.
            if (first_name != "" and last_name != "" and age.isdigit() and down_payment.isdigit() and checked is True):
                # Creates file to write information into.
                with open("Purchases_made.txt", "a") as f:
                    # Writes to file.
                    f.write(f"{first_name},{last_name},{age},{down_payment},{model_type},{house_selection}\n")
            else:
                # Create a message box to output error message.
                msg = QMessageBox()
                # Writes the message that will be displayed to user when an error occurs.
                msg.setText("Please enter information in ALL textboxes. (First name, Last name, Age, Down Payment)")
                # Executes the message.
                msg.exec()
        # Catches exception if one occurs.
        except Exception as e:
            # Prints exception.
            print(e, type(e))
        finally:
            # End of statement.
            pass

    def show_payments(self):
        # Opens the file in read mode.
        try:
            file_name = "Purchases_made.txt"
            # Open the file.
            with open(file_name, "r") as filename:
                # Iterates through each line in file, inserting each element in the dictionary.
                down_payment = 0
                model_type = ""
                house_selection = ""
                for element in filename:
                    data = element.split(",")
                    # Adds data to list.
                    down_payment = int(data[3])
                    model_type = data[4]
                    house_selection = data[5].strip()
                # Creates base price modifier.
                price_modify = 1
                if (model_type == "Smart"):
                    # Changes price modifier to 15%.
                    price_modify = 1.15
                elif (model_type == "Luxury"):
                    # Changes price modifier to 20%
                    price_modify = 1.2
                # Creates variable for home price.
                home_price = self.home_prices_dictionary[house_selection] * price_modify
                # Creates variables to calculate the monthly payment.
                annual_interest_rate = 0.07
                loan_term = 120
                monthly_interest_rate = annual_interest_rate / 12
                loan_amount = home_price - down_payment
                # Calculates monthly payment.
                monthly_payment = loan_amount * monthly_interest_rate * (1 + monthly_interest_rate) ** loan_term / ((1 + monthly_interest_rate) ** loan_term - 1)
                # Holds the month count.
                month_counter = 0
                remaining_balance = loan_amount
                while (remaining_balance >= 0.01):
                    # Calculates the interest payments and the principal payments.
                    interest_payment = remaining_balance * monthly_interest_rate
                    principal_payment = monthly_payment - interest_payment
                    # Format the monthly payments and the remaining amount of the loan.
                    formatted_monthly_payment = f"{principal_payment:.2f}"
                    formatted_remaining = "{:05.2f}".format(remaining_balance)
                    # Add the formatted payment information to the list.
                    self.lstMonthlyPayments.addItem(f"Month {month_counter}: Payment Amount: ${formatted_monthly_payment} Remaining Payment: ${formatted_remaining}")
                    # Break out of the while loop if the balance is less than or equal to 0.
                    if (remaining_balance <= monthly_payment):
                        formatted_last_payment = f"{remaining_balance:.2f}"
                        # Changes the payment amount to reflect the amoung remaining, as it is less than the monthly payment.
                        self.lstMonthlyPayments.addItem(f"Month {month_counter+1}: Payment Amount: ${formatted_last_payment} Remaining Payment: ${0}")
                        break
                    # Decrease the loan amount by 1 monthly payment every iteration.
                    remaining_balance -= principal_payment
                    # Increase the count of the month
                    month_counter += 1
        except FileNotFoundError:
            # Prints statement if file cannot be found.
            print("File not found.")
        except Exception as e:
            # Prints exception.
            print(e, type(e))
        finally:
            # End of statement.
            pass

    def show_puchases(self):
        # Opens the file in read mode.
        try:
            file_name = "Purchases_made.txt"
            #Open the file
            with open(file_name, "r") as filename:
                # Iterates through each line in the file.
                for line in filename:
                    line = line.strip()
                    # Ends the iteration if there is an empty/null next line.
                    if not line:
                        continue
                    # Split the line information into an array of values.
                    data = line.split(",")
                    # Assign the line data to variables.
                    first_name = data[0]
                    last_name = data[1]
                    age = data[2]
                    down_payment = int(data[3])
                    model_type = data[4]
                    house_selection = data[5].strip()
                    # Default price modify, changes depending on what the model is.
                    price_modify = 1
                    if (model_type == "Smart"):
                        # Changes price modifier to 15%.
                        price_modify = 1.15
                    elif (model_type == "Luxury"):
                        # Changes price modifier to 20%
                        price_modify = 1.2
                    # Creates variable for home price.
                    home_price = self.home_prices_dictionary[house_selection] * price_modify
                    # Format the price items to fit the list.
                    formatted_price = "{:05.2f}".format(home_price)
                    formatted_down_payment = "{:05.2f}".format(down_payment)
                    lineItem = (f"Name: {first_name} {last_name} | Age:{age} | Down Payment: ${formatted_down_payment} | Model Type: {model_type} | Home Selection: {house_selection} | Home Price: ${formatted_price}")
                    # Add the data to the list.
                    self.lstPurchasesMade.addItem(lineItem)
        except FileNotFoundError:
            # Prints statement if file cannot be found.
            print("File not found.")
        except Exception as e:
            # Prints exception.
            print(e, type(e))
        finally:
            # End of statement.
            pass
        


    # Function that clears all user input and resets the interface.
    def clear(self):
        try:
            # Reset all entitites to default settings.
            self.txtFirstName.clear()
            self.txtLastName.clear()
            self.txtAge.clear()
            self.txtDownPayment.clear()
            self.cmbHouseType.setCurrentIndex(0)
            self.rbnStandard.setChecked(True)
            self.lstMonthlyPayments.clear()
        # Catches exception if occurs.
        except Exception as e:
            # Prints exception.
            print(e, type(e))
        finally:
            # End of statement.
            pass

    # Function that quits the application when called.
    def exit(self):
        # Exits the application.
        sys.exit()
    

    def retranslateUi(self, HomePurchaseApplication):
        _translate = QtCore.QCoreApplication.translate
        HomePurchaseApplication.setWindowTitle(_translate("HomePurchaseApplication", "Home Purchase Application"))
        self.lblFirstName.setText(_translate("HomePurchaseApplication", "First name:"))
        self.lblLastName.setText(_translate("HomePurchaseApplication", "Last name:"))
        self.lblAge.setText(_translate("HomePurchaseApplication", "Age:"))
        self.cmbHouseType.setItemText(0, _translate("HomePurchaseApplication", "Apartment"))
        self.cmbHouseType.setItemText(1, _translate("HomePurchaseApplication", "Townhouse"))
        self.cmbHouseType.setItemText(2, _translate("HomePurchaseApplication", "Single-Family Home"))
        self.cmbHouseType.setItemText(3, _translate("HomePurchaseApplication", "Luxury Villa"))
        self.gbxChoiceOfHome.setTitle(_translate("HomePurchaseApplication", "Choice of Home:"))
        self.rbnStandard.setText(_translate("HomePurchaseApplication", "Standard"))
        self.rbnSmart.setText(_translate("HomePurchaseApplication", "Smart"))
        self.rbnLuxury.setText(_translate("HomePurchaseApplication", "Luxury"))
        self.lblDownPayment.setText(_translate("HomePurchaseApplication", "Initial Down Payment:"))
        self.btnPurchase.setText(_translate("HomePurchaseApplication", "Purchase"))
        self.btnShowPayments.setText(_translate("HomePurchaseApplication", "Show Payments"))
        self.btnExit.setText(_translate("HomePurchaseApplication", "Exit"))
        self.btnClear.setText(_translate("HomePurchaseApplication", "Clear"))
        self.tbHomePurchase.setTabText(self.tbHomePurchase.indexOf(self.addPurchasesTab), _translate("HomePurchaseApplication", "Home Purchase"))
        self.label.setText(_translate("HomePurchaseApplication", "Past Home Purchases"))
        self.tbHomePurchase.setTabText(self.tbHomePurchase.indexOf(self.homePurchasesTab), _translate("HomePurchaseApplication", "Purchases Made"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    HomePurchaseApplication = QtWidgets.QMainWindow()
    ui = Ui_HomePurchaseApplication()
    ui.setupUi(HomePurchaseApplication)
    HomePurchaseApplication.show()
    sys.exit(app.exec())
